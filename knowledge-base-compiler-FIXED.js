#!/usr/bin/env node

/**
 * ============================================================================
 * KOTIK AI: KNOWLEDGE BASE COMPILER - "–ì–õ–ê–í–ù–´–ô –†–ï–î–ê–ö–¢–û–†"
 * –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä –∑–æ–ª–æ—Ç—ã—Ö —Å—Ç–∞—Ç–µ–π –∏–∑ —Å—ã—Ä—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ (–í–µ—Ä—Å–∏—è 1.0)
 * 
 * –ò–°–ü–†–ê–í–õ–ï–ù–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –£–¥–∞–ª–µ–Ω markdown –±–ª–æ–∫ –∏–∑ —Å—Ç—Ä–æ–∫–∏ 386
 * ============================================================================
 */

import { createClient } from '@supabase/supabase-js';
import OpenAI from 'openai';
import { v4 as uuidv4 } from 'uuid';
import fs from 'fs';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// ============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ============================================================================

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY || !OPENAI_API_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  console.log('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ –µ—Å—Ç—å:');
  console.log('- SUPABASE_URL');
  console.log('- SUPABASE_SERVICE_KEY');
  console.log('- OPENAI_API_KEY');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);
const openai = new OpenAI({ apiKey: OPENAI_API_KEY });

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
const PROCESSING_CONFIG = {
  batch_id: uuidv4(),
  processing_version: '1.0.0',
  ai_model: 'gpt-4o-mini',
  max_threads_per_topic: 30,
  min_thread_relevance: 2,
  parallel_processing: 2,
  batch_size: 5,
  delay_between_batches: 3000
};

// ============================================================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–û–ü–ò–ö–û–í –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò (27 –¢–ï–ú)
// ============================================================================

const TOPICS_CONFIG = [
  // –¢–†–ê–ù–°–ü–û–†–¢ (5 —Ç–µ–º)
  {
    id: 'transport_antalya_kas',
    title: '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä –∏–∑ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –ê–Ω—Ç–∞–ª–∏–∏ –≤ –ö–∞—à',
    card_type: 'chat_summary',
    entity_type: null,
    country: 'Turkey',
    city: 'Kas',
    keywords: ['–∞–Ω—Ç–∞–ª–∏—è', '–∞—ç—Ä–æ–ø–æ—Ä—Ç', '—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä', '–∫–∞—à', '–∞–≤—Ç–æ–±—É—Å', '—Ç–∞–∫—Å–∏'],
    priority: 'high'
  },
  {
    id: 'local_transport_kas',
    title: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –≤ –ö–∞—à–µ - –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥—É',
    card_type: 'chat_summary',
    entity_type: 'transport_local',
    country: 'Turkey',
    city: 'Kas',
    keywords: ['—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–∫–∞—à', '–¥–æ–ª–º—É—à', '—Ç–∞–∫—Å–∏', '–∞—Ä–µ–Ω–¥–∞', '–º–∞—à–∏–Ω–∞', '—Å–∫—É—Ç–µ—Ä'],
    priority: 'high'
  },
  {
    id: 'zaika_marina_profile',
    title: 'Zaika Marina - –ò–Ω–¥–∏–π—Å–∫–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤ –ö–∞—à–µ',
    card_type: 'entity_profile',
    entity_type: 'restaurant',
    country: 'Turkey',
    city: 'Kas',
    keywords: ['zaika', 'marina', '–∏–Ω–¥–∏–π—Å–∫–∏–π', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω'],
    priority: 'medium'
  }
  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ 24 —Ç–µ–º—ã
];

// ============================================================================
// –ü–†–û–ú–ü–¢ "–ì–õ–ê–í–ù–û–ì–û –†–ï–î–ê–ö–¢–û–†–ê" (–ò–°–ü–†–ê–í–õ–ï–ù)
// ============================================================================

const CHIEF_EDITOR_PROMPT = (topicConfig, threads) => `
–¢—ã ‚Äî –≥–ª–∞–≤–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–≥–æ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –≥–∏–¥–∞ –ø–æ –¢—É—Ä—Ü–∏–∏. –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –ø–æ–¥–±–æ—Ä–∫–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∏–∞–ª–æ–≥–æ–≤ —Ç—É—Ä–∏—Å—Ç–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É.

–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å ${topicConfig.card_type === 'entity_profile' ? '–¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–Ω–æ—Å—Ç–∏' : '–∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â—É—é —Å—Ç–∞—Ç—å—é'} –≤—ã—Å–æ—á–∞–π—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.

–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
1. ‚úÖ –¢–û–õ–¨–ö–û —Ñ–∞–∫—Ç—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ - –Ω–∏–∫–∞–∫–æ–π –æ—Ç—Å–µ–±—è—Ç–∏–Ω—ã!
2. ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
3. ‚úÖ –í—Å–µ —Ü–µ–Ω—ã, –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∞–¥—Ä–µ—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á–Ω—ã–º–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤
4. ‚úÖ –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: —Ñ–æ–∫—É—Å –Ω–∞ ${topicConfig.city} –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è—Ö

–í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
–¢–µ–º–∞: ${topicConfig.title}
–¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏: ${topicConfig.card_type}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${threads.length}

–î–ò–ê–õ–û–ì–ò:
${threads.map((thread, idx) => `
=== –î–ò–ê–õ–û–ì ${idx + 1} ===
–í–û–ü–†–û–°: ${thread.question}
–û–¢–í–ï–¢–´: ${thread.full_answers || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤'}
AI SUMMARY: ${thread.ai_summary || '–ù–µ—Ç —Å–∞–º–º–∞—Ä–∏'}
–í–ê–ñ–ù–û–°–¢–¨: ${thread.importance_score}/10
`).join('\\n')}

–¢–†–ï–ë–£–ï–ú–´–ô –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - –¢–û–õ–¨–ö–û –ß–ò–°–¢–´–ô JSON (–±–µ–∑ markdown –±–ª–æ–∫–æ–≤):
{
  "title": "${topicConfig.card_type === 'entity_profile' ? '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ + –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ' : '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏'}",
  "summary": "${topicConfig.card_type === 'entity_profile' ? '–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏' : '–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç—å—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, —Å–ø–∏—Å–∫–∞–º–∏, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π'}",
  "structured_data": {
    "prices": {"—Ç–∏–ø_—É—Å–ª—É–≥–∏": "–¥–∏–∞–ø–∞–∑–æ–Ω_—Ü–µ–Ω"},
    "contacts": [{"name": "–ù–∞–∑–≤–∞–Ω–∏–µ", "type": "telegram/phone", "value": "–∫–æ–Ω—Ç–∞–∫—Ç"}],
    "locations": ["–ú–µ—Å—Ç–æ 1", "–ú–µ—Å—Ç–æ 2"],
    "timing": {"best_time": "–∫–æ–≥–¥–∞ –ª—É—á—à–µ", "duration": "–≤—Ä–µ–º—è"}
  },
  "links": [
    {"type": "contact", "url": "https://t.me/username", "description": "@username"}
  ],
  "tags": ["–æ—Å–Ω–æ–≤–Ω—ã–µ", "–∫–ª—é—á–µ–≤—ã–µ", "—Å–ª–æ–≤–∞", "–∫–∞—à"]
}

‚ö†Ô∏è –í–ê–ñ–ù–û: 
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π markdown –±–ª–æ–∫–∏ —Å –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON

–ü–û–ú–ù–ò: 
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–∞–ª–æ, —á–µ—Å—Ç–Ω–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ –∑–Ω–∞–µ—à—å
- –ì—Ä—É–ø–ø–∏—Ä—É–π –ø–æ—Ö–æ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–∞–∑–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤  
- –í—ã–¥–µ–ª—è–π —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
`;

// ============================================================================
// –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤ –¥–ª—è —Ç–µ–º—ã
 */
async function findRelevantThreads(topicConfig) {
  console.log(`üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–¥–æ–≤ –¥–ª—è —Ç–µ–º—ã: ${topicConfig.title}`);
  
  try {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –∏—â–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –æ—Ç–¥–µ–ª—å–Ω–æ
    const allThreads = new Map(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    for (const keyword of topicConfig.keywords) {
      console.log(`  üîé –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: "${keyword}"`);
      
      // –ü–æ–∏—Å–∫ –≤ question
      const { data: questionResults, error: questionError } = await supabase
        .from('Kotik_table')
        .select('*')
        .ilike('question', `%${keyword}%`)
        .gte('importance_score', PROCESSING_CONFIG.min_thread_relevance)
        .limit(10);
        
      if (questionError) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ question –ø–æ "${keyword}":`, questionError.message);
      } else {
        questionResults?.forEach(thread => allThreads.set(thread.id, thread));
      }
      
      // –ü–æ–∏—Å–∫ –≤ ai_summary
      const { data: summaryResults, error: summaryError } = await supabase
        .from('Kotik_table')
        .select('*')
        .ilike('ai_summary', `%${keyword}%`)
        .gte('importance_score', PROCESSING_CONFIG.min_thread_relevance)
        .limit(10);
        
      if (summaryError) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ ai_summary –ø–æ "${keyword}":`, summaryError.message);
      } else {
        summaryResults?.forEach(thread => allThreads.set(thread.id, thread));
      }
      
      // –ü–æ–∏—Å–∫ –≤ full_answers  
      const { data: answersResults, error: answersError } = await supabase
        .from('Kotik_table')
        .select('*')
        .ilike('full_answers', `%${keyword}%`)
        .gte('importance_score', PROCESSING_CONFIG.min_thread_relevance)
        .limit(10);
        
      if (answersError) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ full_answers –ø–æ "${keyword}":`, answersError.message);
      } else {
        answersResults?.forEach(thread => allThreads.set(thread.id, thread));
      }
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const threads = Array.from(allThreads.values())
      .sort((a, b) => {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ importance_score, –ø–æ—Ç–æ–º –ø–æ replies_count
        if (b.importance_score !== a.importance_score) {
          return b.importance_score - a.importance_score;
        }
        return (b.replies_count || 0) - (a.replies_count || 0);
      })
      .slice(0, PROCESSING_CONFIG.max_threads_per_topic);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${threads.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤`);
    return threads;
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–¥–æ–≤:', error);
    return [];
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–ª–æ—Ç–æ–π —Å—Ç–∞—Ç—å–∏ —Å –ø–æ–º–æ—â—å—é GPT-4o
 */
async function createGoldenArticle(topicConfig, threads) {
  console.log(`ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è: ${topicConfig.title}`);
  
  if (!threads.length) {
    console.warn('‚ö†Ô∏è –ù–µ—Ç —Ç—Ä–µ–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    return null;
  }
  
  const prompt = CHIEF_EDITOR_PROMPT(topicConfig, threads);
  
  try {
    const response = await openai.chat.completions.create({
      model: PROCESSING_CONFIG.ai_model,
      messages: [
        {
          role: 'system',
          content: '–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –≥–∏–¥–æ–≤. –°–æ–∑–¥–∞–µ—à—å —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û—Ç–≤–µ—á–∞–µ—à—å –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û —á–∏—Å—Ç—ã–º, –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ markdown —Ä–∞–∑–º–µ—Ç–∫–∏ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.'
        },
        {
          role: 'user', 
          content: prompt
        }
      ],
      temperature: 0.3,
      max_tokens: 4000
    });
    
    const aiResponse = response.choices[0].message.content;
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ${PROCESSING_CONFIG.ai_model}`);
    
    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    try {
      let jsonString = aiResponse.trim();
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ markdown –±–ª–æ–∫–æ–≤ (–µ—Å–ª–∏ AI –≤—Å–µ –∂–µ –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç)
      if (jsonString.includes('```')) {
        jsonString = jsonString.replace(/```json\\s*|```\\s*/g, '').trim();
      }
      
      const parsedResponse = JSON.parse(jsonString);
      return parsedResponse;
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      console.log('Raw AI response:', aiResponse.slice(0, 200) + '...');
      
      // Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      return {
        title: topicConfig.title,
        summary: aiResponse,
        structured_data: {},
        links: [],
        tags: topicConfig.keywords
      };
    }
    
  } catch (apiError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ OpenAI API:', apiError);
    throw apiError;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–æ–π —Å—Ç–∞—Ç—å–∏ –≤ –ë–î
 */
async function saveGoldenCard(topicConfig, threads, aiResult) {
  console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏: ${aiResult.title}`);
  
  const goldenCard = {
    // –ì–µ–æ–≥—Ä–∞—Ñ–∏—è  
    country: topicConfig.country,
    city: topicConfig.city,
    
    // –¢–∏–ø–∏–∑–∞—Ü–∏—è
    card_type: topicConfig.card_type,
    entity_type: topicConfig.entity_type,
    
    // –ö–æ–Ω—Ç–µ–Ω—Ç
    title: aiResult.title,
    summary: aiResult.summary,
    structured_data: aiResult.structured_data,
    links: aiResult.links || [],
    tags: aiResult.tags || topicConfig.keywords,
    
    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    batch_id: PROCESSING_CONFIG.batch_id,
    processing_version: PROCESSING_CONFIG.processing_version,
    status: 'draft',
    
    // –ò—Å—Ç–æ—á–Ω–∏–∫–∏
    source_thread_ids: threads.map(t => t.id?.toString() || t.thread_id?.toString()),
    raw_data_payload: {
      original_threads_count: threads.length,
      ai_model: PROCESSING_CONFIG.ai_model,
      processing_timestamp: new Date().toISOString(),
      topic_config: topicConfig,
      keywords_used: topicConfig.keywords
    },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    extra_data: {
      creation_stats: {
        threads_processed: threads.length,
        avg_importance_score: threads.reduce((acc, t) => acc + (t.importance_score || 0), 0) / threads.length,
        total_replies: threads.reduce((acc, t) => acc + (t.replies_count || 0), 0)
      }
    }
  };
  
  const { data, error } = await supabase
    .from('golden_knowledge_cards')
    .insert([goldenCard])
    .select();
    
  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    throw error;
  }
  
  console.log(`‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: ${data[0]?.id}`);
  return data[0];
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
// ============================================================================

async function main() {
  console.log(`
ü§ñ ============================================================================
   KOTIK AI: KNOWLEDGE BASE COMPILER - "–ì–õ–ê–í–ù–´–ô –†–ï–î–ê–ö–¢–û–†"
   –í–µ—Ä—Å–∏—è: ${PROCESSING_CONFIG.processing_version}
   –°–¢–ê–¢–£–°: ‚úÖ –û–®–ò–ë–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê
============================================================================
  `);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    console.log('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...');
    const { data: testConnection, error: testError } = await supabase
      .from('golden_knowledge_cards')
      .select('count')
      .limit(1);
      
    if (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', testError);
      console.error('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ golden_knowledge_cards —Å–æ–∑–¥–∞–Ω–∞!');
      throw testError;
    }
      
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ golden_knowledge_cards –¥–æ—Å—Ç—É–ø–Ω–∞');
    
    console.log('\\nüéØ –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–º!');
    console.log('–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ...');
    
    // –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô–¢–ï –î–õ–Ø –ü–û–õ–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò:
    // const sortedTopics = [...TOPICS_CONFIG].sort((a, b) => {
    //   const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1 };
    //   return priorityOrder[b.priority] - priorityOrder[a.priority];
    // });
    // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// ============================================================================
// –ó–ê–ü–£–°–ö
// ============================================================================

if (process.argv[1] === new URL(import.meta.url).pathname) {
  main();
}